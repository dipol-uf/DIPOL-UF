<Window x:Class="DIPOL_UF.Views.DipolMainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:vs="clr-namespace:DIPOL_UF.Views"
        xmlns:vms="clr-namespace:DIPOL_UF.ViewModels"
        xmlns:extensions="clr-namespace:DIPOL_UF.Extensions"
        xmlns:enums="clr-namespace:DIPOL_UF.Enums"
        Title="{Binding ApplicationName, Mode=OneTime}" 
        Height="960" Width="1280" HorizontalContentAlignment="Stretch" 
        MinWidth="768" MinHeight="576" WindowStartupLocation="CenterScreen"
        Style="{StaticResource ResourceKey=ContentFont}"
        x:Name="DipolWindow"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=vms:DipolMainWindowViewModel}">
    <behaviors:Interaction.Triggers>
        <behaviors:EventTrigger EventName="Loaded">
            <behaviors:InvokeCommandAction
                Command="{Binding WindowLoadedCommand}"/>
        </behaviors:EventTrigger>
        <behaviors:EventTrigger
            EventName="ViewRequested"
            SourceObject="{Binding ProgressBarProxy}">
            <extensions:ShowViewAction 
                Owner="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                Proxy="{Binding ProgressBarProxy}"
                Type="{x:Type vs:ProgressWindow}"/>
        </behaviors:EventTrigger>
        <behaviors:EventTrigger
            EventName="ViewRequested"
            SourceObject="{Binding AvailableCamerasProxy}">
            <extensions:ShowViewAction
                Owner="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                Proxy="{Binding AvailableCamerasProxy}"
                Type ="{x:Type vs:AvailableCameraView}"/>
        </behaviors:EventTrigger>
        <behaviors:EventTrigger
            EventName="ViewRequested"
            SourceObject="{Binding RegimeSwitchProxy}">
            <extensions:ShowViewAction 
                Owner="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                Proxy="{Binding RegimeSwitchProxy}"
                Type="{x:Type vs:ProgressWindow}"/>
        </behaviors:EventTrigger>
        <behaviors:EventTrigger
            EventName="Closing"
            SourceObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
            <extensions:EventToCommandAction1 
                Command="{Binding WindowClosingCommand}"
                Sender="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
            />
        </behaviors:EventTrigger>
    </behaviors:Interaction.Triggers>
    <Grid DockPanel.Dock="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="auto"/>
        </Grid.ColumnDefinitions>
        <Menu DockPanel.Dock="Top" x:Name="MenuBar" VerticalAlignment="Top" VerticalContentAlignment="Center"
              Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2"
              Style="{StaticResource ResourceKey=MenuBarStyle}"      
              ItemTemplate="{StaticResource ResourceKey=MenuBarItemTemplate}"/>

        
        <TabControl x:Name="CameraTabs" Margin="2"
                    Grid.Row="1" Grid.Column="0"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    ItemsSource="{Binding CameraTabs}"
                    ContentTemplate="{StaticResource ResourceKey=TabControlItemTemplate}"
                    ItemContainerStyle="{StaticResource ResourceKey=TabItemStyle}">
         </TabControl>
        
        <Border HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="2, 4, 2, 2"
                Grid.Row="1" Grid.Column="1"
                Style="{StaticResource ResourceKey=BorderStyle}">
            <Grid Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                
                <Border Grid.Row="0" 
                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                        Style="{StaticResource ResourceKey=BorderStyle}"
                        BorderThickness="{StaticResource ResourceKey=BottomOnlyBorderThickness}">
                    <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <CheckBox VerticalAlignment="Center" HorizontalAlignment="Left" 
                                    Margin="10, 0, 0, 0"
                                    IsThreeState="True"
                                    IsEnabled="{Binding AnyCameraConnected}"
                                    x:Name="SelectAllCheckBox"
                                    IsChecked="{Binding AllCamerasSelected, Mode=OneWay}"
                                    Command="{Binding SelectAllCamerasCommand}"
                                    />

                        <Label x:Name="ConnectedCamerasLabel" 
                                Content="{extensions:Text Key=MainWindow_CameraManager}" 
                                HorizontalAlignment="Center" VerticalAlignment="Stretch" 
                                VerticalContentAlignment="Center"/>
                    </Grid>
                </Border>
                <ScrollViewer TabIndex="0" Grid.Row="1" >
                    <ItemsControl x:Name="CameraTreeListView" 
                            KeyboardNavigation.ControlTabNavigation="Cycle"
                            ItemsSource="{Binding CameraPanel}"
                            ItemTemplate="{StaticResource ResourceKey=ListTreeViewItemTemplate}"/>
                </ScrollViewer>
                <Border VerticalAlignment="Bottom" HorizontalAlignment="Stretch" 
                        Grid.Row="2" 
                        Style="{StaticResource ResourceKey=BorderStyle}"
                        BorderThickness="{StaticResource ResourceKey=TopOnlyBorderThickness}">
                    <DockPanel>
                        <Button x:Name="ConnectNewCamerasButton" DockPanel.Dock="Left"
                                Style="{StaticResource ResourceKey=PositiveEffectButtonStyle}" 
                                Content="{extensions:Text Key=General_Connect}"
                                Command="{Binding ConnectButtonCommand}"
                                CommandParameter="{Binding ElementName=DipolWindow}"
                                />
                        <Button x:Name="ReleaseExistingCamerasButton" DockPanel.Dock="Right"
                                Style="{StaticResource ResourceKey=NegativeEffectButtonStyle}" 
                                Content="{extensions:Text Key=General_Disconnect}"
                                Command="{Binding DisconnectButtonCommand}" 
                                />
                    </DockPanel>
                </Border>
                <Border  VerticalAlignment="Bottom" 
                         Grid.Row="3" 
                        Style="{StaticResource ResourceKey=BorderStyle}"
                        BorderThickness="{StaticResource ResourceKey=TopOnlyBorderThickness}">
                    <DockPanel>
                    <Button DockPanel.Dock="Left"
                        HorizontalAlignment="Center" IsEnabled="True"
                        Command="{Binding PolarimeterMotorButtonCommand}">
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource BasicButtonStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasPolarimeterMotor}" Value="True">
                                        <Setter Property="Content" Value="{extensions:Text Key=MainWindow_PolarimeterButton_Present}"/>
                                        <Setter Property="Background" Value="{StaticResource PositiveEffectButtonBackgroundColor}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasPolarimeterMotor}" Value="False">
                                        <Setter Property="Content" Value="{extensions:Text Key=MainWindow_PolarimeterButton_None}"/>
                                        <Setter Property="Background" Value="{StaticResource NegativeEffectButtonBackgroundColor}"></Setter>
                                    </DataTrigger>
                                    </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                        <Button DockPanel.Dock="Left"
                                HorizontalAlignment="Center" IsEnabled="True"
                                Command="{Binding RetractorMotorButtonCommand}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource BasicButtonStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasRetractorMotor}" Value="True">
                                            <Setter Property="Content" Value="{extensions:Text Key=MainWindow_RetractorButton_Present}"/>
                                            <Setter Property="Background" Value="{StaticResource PositiveEffectButtonBackgroundColor}"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasRetractorMotor}" Value="False">
                                            <Setter Property="Content" Value="{extensions:Text Key=MainWindow_RetractorButton_None}"/>
                                            <Setter Property="Background" Value="{StaticResource NegativeEffectButtonBackgroundColor}"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </DockPanel>
                </Border>
                <Border  VerticalAlignment="Bottom" 
                         Grid.Row="4" 
                        Style="{StaticResource ResourceKey=BorderStyle}"
                        BorderThickness="{StaticResource ResourceKey=TopOnlyBorderThickness}">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="130"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.Column="0"
                            Style="{StaticResource TextBlock_SmallFont}"
                            Text = "{Binding ActualRegime, Converter={StaticResource EnumToDescriptionConverter}}"
                            HorizontalAlignment="Right"/>
                        <Slider 
                            HorizontalAlignment="Right"
                            Value ="{Binding Regime, Mode=TwoWay}"
                            IsEnabled="{Binding CanSwitchRegime}"
                            Grid.Column="1"
                            Margin="{StaticResource DefaultMargin}"
                            Style="{StaticResource SlaveMasterSlider}">
                        </Slider>
                    </Grid>
                </Border>
            </Grid>
        </Border>
        <StatusBar Name="DipolStatusBar" 
                   Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                   VerticalAlignment="Bottom">
            <StatusBar.Style>
                <Style BasedOn="{StaticResource StatusBarStyle}" TargetType="StatusBar">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ActualRegime}" Value="{x:Static enums:InstrumentRegime.Polarimeter}">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush_2}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ActualRegime}" Value="{x:Static enums:InstrumentRegime.Photometer}">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush_1}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ActualRegime}" Value="{x:Static enums:InstrumentRegime.Unknown}">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush_4}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StatusBar.Style>
        </StatusBar>
    </Grid>
</Window>

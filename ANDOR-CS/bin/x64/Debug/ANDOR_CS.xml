<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ANDOR_CS</name>
    </assembly>
    <members>
        <member name="T:ANDOR_CS.Classes.AcquisitionSettings">
            <summary>
            Represents all possible acuisition/camera settings that can be adjusted before taking any images
            </summary>
        </member>
        <member name="F:ANDOR_CS.Classes.AcquisitionSettings.camera">
            <summary>
            A reference to the parent <see cref="T:ANDOR_CS.Classes.Camera"/> object.
            Used to perform checks of capabilities of the current camera.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.VSSpeed">
            <summary>
            Stores the value of currently set vertical speed
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.HSSpeed">
            <summary>
            Stores the value of currently set horizontal speed
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.ADConverter">
            <summary>
            Stores the index of currently set Analogue-Digital Converter and its bit depth.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.VSAmplitude">
            <summary>
            Stores the value of currently set vertical clock voltage amplitude
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.Amplifier">
            <summary>
            Stores type of currentlt set Amplifier
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.PreAmpGain">
            <summary>
            Stores type of currently set PreAmp Gain
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.AcquisitionMode">
            <summary>
            Stores currently set acquisition mode
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.ReadMode">
            <summary>
            Stores currently set read mode
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.TriggerMode">
            <summary>
            Stores currently set trigger mode
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.ExposureTime">
            <summary>
            Stores exposure time
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AcquisitionSettings.ImageArea">
            <summary>
            Stoers seleced image area - part of the CCD from where data should be collected
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.#ctor(ANDOR_CS.Classes.Camera)">
            <summary>
            Constructor adds reference to parent <see cref="T:ANDOR_CS.Classes.Camera"/> object.
            </summary>
            <param name="camera">Parent object. Camera, to which settings should be applied.</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.CheckCamera">
            <summary>
            Checks camera parent <see cref="T:ANDOR_CS.Classes.Camera"/>. If it is not initialized or active, throws exception.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.ApplySettings(System.ValueTuple{System.Single,System.Single,System.Single,System.Int32}@)">
            <summary>
            Applys currenlty selected settings to the camera.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>Result of application of each non-null setting</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetVSSpeed(System.Int32)">
            <summary>
            Tries to set vertical speed. 
            Camera may not be active.
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="speedIndex">Index of available speed that corresponds to VSpeed listed in <see cref="!:Camera.Properties"/>.VSSpeeds</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetVSSpeed">
            <summary>
            Tries to set vertical speed to fastest recommended speed. 
            Requires camera to be active.
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetVSAmplitude(ANDOR_CS.Enums.VSAmplitude)">
            <summary>
            Sets the vertical clock voltage amplitude (if camera supports it).
            Camera may be not active.
            </summary>
            <param name="amplitude">New amplitude </param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetADConverter(System.Int32)">
            <summary>
            Sets Analogue-Digital converter.
            Does not require camera to be active
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="converterIndex"></param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetOutputAmplifier(ANDOR_CS.Enums.OutputAmplification)">
            <summary>
            Sets output amplifier. 
            Does not require camera to be active.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="amplifier"></param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.GetAvailableHSSpeeds">
            <summary>
            Returns a collection of available Horizonal Readout Speeds for currently selected Amplifier and AD Converter.
            Requires camera to be active.
            Note: <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.ADConverter"/> and <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.Amplifier"/> should be set
            via <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetADConverter(System.Int32)"/> and <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetOutputAmplifier(ANDOR_CS.Enums.OutputAmplification)"/>
            before calling this method.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <returns>An enumerable collection of speed indexes and respective speed values available.</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetHSSpeed(System.Int32)">
            <summary>
            Sets Horizontal Readout Speed for currently selected Amplifier and AD Converter.
            Requires camera to be active.
            Note: <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.ADConverter"/> and <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.Amplifier"/> should be set
            via <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetADConverter(System.Int32)"/> and <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetOutputAmplifier(ANDOR_CS.Enums.OutputAmplification)"/>
            before calling this method.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="speedIndex">Index of horizontal speed</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.GetAvailablePreAmpGain">
            <summary>
            Returns a collection of available PreAmp gains for currently selected HSSpeed, Amplifier, Converter.
            Requires camera to be active.
            Note: <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.ADConverter"/>, <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.HSSpeed"/>
            and <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.Amplifier"/> should be set
            via <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetADConverter(System.Int32)"/>, <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetHSSpeed(System.Int32)"/>
            and <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetOutputAmplifier(ANDOR_CS.Enums.OutputAmplification)"/>.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:System.NotSupportedException"/>
            <returns>Available PreAmp gains</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetPreAmpGain(System.Int32)">
            <summary>
            Sets PreAmp gain for currently selected HSSpeed, Amplifier, Converter.
            Requires camera to be active.
            Note: <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.ADConverter"/>, <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.HSSpeed"/>
            and <see cref="P:ANDOR_CS.Classes.AcquisitionSettings.Amplifier"/> should be set
            via <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetADConverter(System.Int32)"/>, <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetHSSpeed(System.Int32)"/>
            and <see cref="M:ANDOR_CS.Classes.AcquisitionSettings.SetOutputAmplifier(ANDOR_CS.Enums.OutputAmplification)"/>.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="gainIndex">Index of gain</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetAcquisitionMode(ANDOR_CS.Enums.AcquisitionMode)">
            <summary>
            Sets acquisition mode. 
            Camera may be inactive.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <param name="mode">Acquisition mode</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetTriggerMode(ANDOR_CS.Enums.TriggerMode)">
            <summary>
            Sets trigger mode. 
            Camera may be inactive.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <param name="mode">Trigger mode</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetReadoutMode(ANDOR_CS.Enums.ReadMode)">
            <summary>
            Sets read mode.
            Camera may be inactive.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <param name="mode">Read mode</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetExposureTime(System.Single)">
            <summary>
            Sets exposure time.
            Camera may be inactive.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="time">Exposure time</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.SetImageArea(ANDOR_CS.DataStructures.Rectangle)">
            <summary>
            Sets image area.
            Camera may be inactive.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="area">Image rectangle</param>
        </member>
        <member name="M:ANDOR_CS.Classes.AcquisitionSettings.#ctor">
            <summary>
            SERIALIZATION TEST CONSTRUCTOR; DO NOT USE
            </summary>
        </member>
        <member name="T:ANDOR_CS.Classes.CameraBase">
            <summary>
            Base abstract class to all ANDOR-device classes
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.CameraBase.CameraIndex">
            <summary>
            Andor SDK unique index of camera; passed to constructor
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.CameraBase.IsAcquiring">
            <summary>
            Indicates if camera is in process of image acquisition.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.CameraBase.IsAsyncAcquisition">
            <summary>
            Indicates if acquisition is launched from async method and
            camera is able to properly fire all events.
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.PropertyChanged">
            <summary>
            Fires when one of the properties was changed
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.AcquisitionStarted">
            <summary>
            Fires when acquisition is started.
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.AcquisitionFinished">
            <summary>
            Fires when acquisition is finished.
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.AcquisitionStatusChecked">
            <summary>
            Fires when acquisition status is asynchronously checked
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.AcquisitionErrorReturned">
            <summary>
            Fires when an exception is thrown in a background asynchronous task
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.AcquisitionAborted">
            <summary>
            Fires when acquisition is aborted manually
            </summary>
        </member>
        <member name="E:ANDOR_CS.Classes.CameraBase.TemperatureStatusChecked">
            <summary>
            Fires when backround task acsynchronously checks temperature
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.GetStatus">
            <summary>
            When overriden in a derived class, returns current status of the camera
            </summary>
            <returns>Status of a camera</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.Dispose">
            <summary>
            When overriden in derived class, disposes camera instance and frees all resources.
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.GetCurrentTemperature">
            <summary>
            When overriden in derived class, returns current camera temperature and temperature status
            </summary>
            <returns>Temperature status and temperature in degrees</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnPropertyChanged(System.String)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.PropertyChanged"/> event
            </summary>
            <param name="property">Compiler-filled name of the property that fires event.</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnAcquisitionStarted(ANDOR_CS.Events.AcquisitionStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.AcquisitionStarted"/> event.
            </summary>
            <param name="e">Status of camera at the beginning of acquisition</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnAcquisitionStatusChecked(ANDOR_CS.Events.AcquisitionStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.AcquisitionStatusChecked"/> event.
            </summary>
            <param name="e">Status of camera during acquisition</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnAcquisitionFinished(ANDOR_CS.Events.AcquisitionStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.AcquisitionFinished"/> event.
            </summary>
            <param name="e">Status of camera at the end of acquisition</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnAcquisitionErrorReturned(ANDOR_CS.Events.AcquisitionStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.AcquisitionErrorReturned"/> event.
            </summary>
            <param name="e">Status of camera when exception was thrown</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnAcquisitionAborted(ANDOR_CS.Events.AcquisitionStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.AcquisitionAborted"/> event.
            </summary>
            <param name="e">Status of camera when abortion happeed</param>
        </member>
        <member name="M:ANDOR_CS.Classes.CameraBase.OnTemperatureStatusChecked(ANDOR_CS.Events.TemperatureStatusEventArgs)">
            <summary>
            Fires <see cref="E:ANDOR_CS.Classes.CameraBase.TemperatureStatusChecked"/> event
            </summary>
            <param name="e">Status of the camera when temperature was checked.</param>
        </member>
        <member name="T:ANDOR_CS.Classes.SafeSDKCameraHandle">
            <summary>
            A safe handle class based on <see cref="T:System.Runtime.InteropServices.SafeHandle"/> class tha uses internal <see cref="T:System.IntPtr"/> handle to store
            intrinsic AndorSDK camera handle/pointer.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.SafeSDKCameraHandle.SDKPtr">
            <summary>
            A porperty with getter that returns stored raw Andor SDK camera handle
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.SafeSDKCameraHandle.#ctor(System.Int32)">
            <summary>
            A constructor. Calls base constructor with ownsHandle = true
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:ANDOR_CS.Classes.SafeSDKCameraHandle.ReleaseHandle">
            <summary>
            An overriden ReleaseHandle method that performs all the cleanup procedures. 
            Marked for safe execution
            </summary>
            <returns>true if cleanup finished successfully, false, otherwise, which triggers releaseHandleFailed MDA</returns>
        </member>
        <member name="T:ANDOR_CS.Classes.Extensions">
            <summary>
            Helper class that can be used to retrieve all flags set in a given <see cref="T:System.Enum"/> mask
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Extensions.GetEnumNames(System.Type,System.Enum)">
            <summary>
            Returns all flags that are set in a given <see cref="T:System.Enum"/> mask
            </summary>
            <param name="enumType"><see cref="T:System.Type"/> of <see cref="T:System.Enum"/></param>
            <param name="value">Mask</param>
            <exception cref="T:System.ArgumentException"/>
            <returns>An array of <see cref="T:System.String"/> representations of <see cref="T:System.Enum"/> flags</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Extensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of item in specified collection.
            </summary>
            <typeparam name="T">Any type that supports comparison using <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)"/></typeparam>
            <param name="collection">Collection where to look for an item</param>
            <param name="item">An item of which to find index</param>
            <returns>-1 if item is not in the collection, index, otherwise</returns>
        </member>
        <member name="T:ANDOR_CS.Classes.AndorSDKInitialization">
            <summary>
            Holds a singleton instance of AndorSDK class that is used across applications.
            Thread-safety is unknown.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.AndorSDKInitialization.SDKInstance">
            <summary>
            Gets an singleton instance of a basic AndorSDK class
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.AndorSDKInitialization.Call``1(ANDOR_CS.Classes.AndorSDKInitialization.AndorSDK{``0},``0@)">
            <summary>
            Task-safely invokes SDK method with one output ref parameter
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <param name="method"><see cref="P:ANDOR_CS.Classes.AndorSDKInitialization.SDKInstance"/> method to invoke</param>
            <param name="p1">Stores result of the function call</param>
            <returns>Return code</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AndorSDKInitialization.Call``2(ANDOR_CS.Classes.AndorSDKInitialization.AndorSDK{``0,``1},``0,``1@)">
            <summary>
            Task-safely invokes SDK method with oneinput and one output ref parameter
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <param name="method"><see cref="P:ANDOR_CS.Classes.AndorSDKInitialization.SDKInstance"/> method to invoke</param>
            <param name="p1">Inpput argument of the method</param>
            <param name="p2">Stores result of the function call</param>
            <returns>Return code</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AndorSDKInitialization.Call``3(ANDOR_CS.Classes.AndorSDKInitialization.AndorSDK{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Task-safely invokes SDK method with oneinput and one output ref parameter
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <param name="method"><see cref="P:ANDOR_CS.Classes.AndorSDKInitialization.SDKInstance"/> method to invoke</param>
            <param name="p1">First inpput argument of the method</param>
            <param name="p2">Second inpput argument of the method</param>
            <param name="p3">Stores result of the function call</param>
            <returns>Return code</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.AndorSDKInitialization.LockManually">
            <summary>
            Manually waits while other tasks access SDK instance
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.AndorSDKInitialization.ReleaseManually">
            <summary>
            Manually releases semaphore and allows other tasks to call SDK functions
            </summary>
        </member>
        <member name="T:ANDOR_CS.Classes.Camera">
            <summary>
            Represents an instance of a Camera device
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.Camera.IsActive">
            <summary>
            Indicates if this camera is currently active
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.Camera.CurrentSettings">
            <summary>
            Curently set acquisition regime
            </summary>
        </member>
        <member name="P:ANDOR_CS.Classes.Camera.CamerasInUse">
            <summary>
            Read-only collection of all local cameras in use.
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetCapabilities">
            <summary>
            Retrieves camera's capabilities
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetCameraSerialNumber">
            <summary>
            Retrieves camera's serial number
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetHeadModel">
            <summary>
            Retrieves camera's model
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetCameraProperties">
            <summary>
            Determines properties of currently active camera and sets respective Camera.Properties field.
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetSoftwareHardwareVersion">
            <summary>
            Retrieves software/hardware versions
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.SetActiveAndLock">
            <summary>
            Sets curernt camera active and locks it, preventing any further switches
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.ReleaseLock">
            <summary>
            Releases current camera, allowing to switch to another device
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.SetActive">
            <summary>
            Sets current camera active
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetStatus">
            <summary>
            Gets current status of the camera
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <returns>Camera status</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.FanControl(ANDOR_CS.Enums.FanMode)">
            <summary>
            Sets fan mode
            </summary>
            <param name="mode">Desired fan mode</param>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.CoolerControl(ANDOR_CS.Enums.Switch)">
            <summary>
            Controls cooler regime
            </summary>
            <param name="mode">Desired mode</param>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.SetTemperature(System.Int32)">
            <summary>
            Sets target cooling temperature
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
            <param name="temperature">Temperature</param>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetCurrentTemperature">
            <summary>
            Returns current camera temperature and temperature status
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <returns>Temperature status and temperature in degrees</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.StartAcquisition">
            <summary>
            Starts acquisition of the image. Does not block current thread.
            To monitor acquisition progress, use <see cref="M:ANDOR_CS.Classes.Camera.GetStatus"/>.
            Fires <see cref="!:OnAcquisitionStarted(AcquisitionStatusEventArgs)"/> 
            with <see cref="P:ANDOR_CS.Events.AcquisitionStatusEventArgs.IsAsync"/> = false.
            NOTE: this method is not recommended. Consider using async version
            <see cref="M:ANDOR_CS.Classes.Camera.StartAcquistionAsync(System.Threading.CancellationToken,System.Int32)"/>.
            Async version allows <see cref="T:ANDOR_CS.Classes.Camera"/> to properly monitor acquisition progress.
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.AbortAcquisition">
            <summary>
            A synchronous way to manually abort acquisition.
            NOTE: if called while async acquisition is in progress, throws
            <see cref="T:System.Threading.Tasks.TaskCanceledException"/>. To cancel async acquisition, use 
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException"/>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.TemperatureMonitor(ANDOR_CS.Enums.Switch,System.Int32)">
            <summary>
            Enables or disables background temperature monitor
            </summary>
            <exception cref="T:System.NotSupportedException"/>
            <param name="mode">Regime</param>
            <param name="timeout">Time interval between checks</param>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetAcquisitionSettingsTemplate">
            <summary>
            Generates an instance of <see cref="T:ANDOR_CS.Classes.AcquisitionSettings"/> that can be used to select proper settings for image
            acquisition in the context of this camera
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <returns>A template that can be used to select proper acquisition settings</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.Dispose">
            <summary>
            A realisation of <see cref="M:System.IDisposable.Dispose"/> method.
            Frees SDK-related resources
            </summary>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.#ctor(System.Int32)">
            <summary>
            Creates a new instance of Camera class to represent a connected Andor device.
            Maximum 8 cameras can be controled at the same time
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <param name="camIndex">The index of a camera (cannot exceed [0, 7] range). Usually limited by <see cref="M:ANDOR_CS.Classes.Camera.GetNumberOfCameras"/></param>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.StartAcquistionAsync(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Starts process of acquisition asynchronously.
            This is the preferred way to acquire images from camera.
            To run synchronously, call i.e. <see cref="M:System.Threading.Tasks.Task.Wait"/> on the returned task.
            </summary>
            <param name="token">Cancellation token that can be used to abort process.</param>
            <param name="timeout">Time interval in ms between subsequent camera status queries.</param>
            <exception cref="T:ANDOR_CS.Exceptions.AcquisitionInProgressException"/>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <returns>Task that can be queried for execution status.</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetNumberOfCameras">
            <summary>
            Queries the number of currently connected Andor cameras
            </summary>
            <exception cref="T:ANDOR_CS.Exceptions.AndorSDKException"/>
            <returns>TNumber of detected cameras</returns>
        </member>
        <member name="M:ANDOR_CS.Classes.Camera.GetDebugInterface(System.Int32)">
            <summary>
            Generates an interface for debug purposes 
            Does not requrire real camera
            </summary>
            <returns></returns>
        </member>
        <member name="T:ANDOR_CS.DataStructures.CameraProperties">
            <summary>
            Stores information about camera-specific properties
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.AllowedTemperatures">
            <summary>
            If available, stores the range of temperatures to which camera can be cooled
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.DetectorSize">
            <summary>
            If available, stores the size of a 2D detector (in pixels)
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.HasInternalMechanicalShutter">
            <summary>
            If available, indicates if camera has internal mechanical shutter
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.ADConverters">
            <summary>
            An array of bit-depths for each available AD converter
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.Amplifiers">
            <summary>
            An array of available amplifiers with respective maximum allowed horizontal speed
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.PreAmpGains">
            <summary>
            An array of available pre amp gain settings
            </summary>
        </member>
        <member name="P:ANDOR_CS.DataStructures.CameraProperties.VSSpeeds">
            <summary>
            An array of available Vertical Speeds (in us)
            </summary>
        </member>
        <member name="T:ANDOR_CS.DataStructures.DeviceCapabilities">
            <summary>
            Contains information about capabilities of a device.
            </summary>
        </member>
        <member name="T:ANDOR_CS.Enums.AcquisitionMode">
            <summary>
            Acquisition modes
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.SingleScan">
            <summary>
            Single Scan
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.RunTillAbort">
            <summary>
            Run till abort or Video
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.Accumulation">
            <summary>
            Accumulation
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.Kinetic">
            <summary>
            Kinetic series
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.FrameTransfer">
            <summary>
            Frame transfer
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.FastKinetics">
            <summary>
            Fast kinetics
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.Overlap">
            <summary>
            Overlap
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.AcquisitionMode.UnspecifiedMode">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="T:ANDOR_CS.Enums.Switch">
            <summary>
            Represents function of an object that can be in either of two regimes:
            Enabled or Disabled
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.Switch.Enabled">
            <summary>
            Funcion is enabled/turned on
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.Switch.Disabled">
            <summary>
            Function is disabled/turned of
            </summary>
        </member>
        <member name="T:ANDOR_CS.Enums.FanMode">
            <summary>
            Device's internal cooling system fan regimes
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.FanMode.FullSpeed">
            <summary>
            Full speed
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.FanMode.LowSpeed">
            <summary>
            Low speed; available only on some devices
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.FanMode.Off">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:ANDOR_CS.Enums.OutputAmplification">
            <summary>
            Different type of output amplifiers. Availalbe on iXon, Clara and Newton
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.OutputAmplification.ElectronMultiplication">
            <summary>
            Electron multiplication. Not available for Clara 
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.OutputAmplification.Conventional">
            <summary>
            Standard conventional 
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.OutputAmplification.ExtendedNIR">
            <summary>
            Only supported by Clara
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.Bits8">
            <summary>
            8-bit mode
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.Bits14">
            <summary>
            14-bit mode
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.Bits16">
            <summary>
            16-bit mode
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.Bits32">
            <summary>
            32-bit mode
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.Mono">
            <summary>
            Grey scale
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.RGB">
            <summary>
            RGB colors
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.PixelMode.CMY">
            <summary>
            CMY colors
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.SetFunction.VerticalReadoutSpeed">
            <summary>
            Supports changing of vertical reading speed
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.SetFunction.HorizontalReadoutSpeed">
            <summary>
            Supports changing of horizontal reading speed
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.SetFunction.Temperature">
            <summary>
            Supports temperature control
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.SetFunction.VerticalClockVoltage">
            <summary>
            Supports vertical clock voltage amplitude control
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.SetFunction.PreAmpGain">
            <summary>
            Supports Pre Amp Gain control
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.TriggerMode.Bulb">
            <summary>
            WARNING! Deprecated by <see cref="F:ANDOR_CS.Enums.TriggerMode.ExternalExposure"/>
            </summary>
        </member>
        <member name="T:ANDOR_CS.Enums.VSAmplitude">
            <summary>
            Available vertical clock voltage amplitudes to set. 
            Not all camera support this feature, not all amplitudes may be available.
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.VSAmplitude.Normal">
            <summary>
            0, default
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.VSAmplitude.Plus1">
            <summary>
            +1
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.VSAmplitude.Plus2">
            <summary>
            +2
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.VSAmplitude.Plus3">
            <summary>
            +3
            </summary>
        </member>
        <member name="F:ANDOR_CS.Enums.VSAmplitude.Plus4">
            <summary>
            +4
            </summary>
        </member>
        <member name="T:ANDOR_CS.Events.AcquisitionStatusEventHandler">
            <summary>
            Handles all events related to acquisition of image process.
            </summary>
            <param name="sender">A <see cref="!:Camera"/> type source</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:ANDOR_CS.Events.TemperatureStatusEventHandler">
            <summary>
            Handles all events related to temperature cycle.
            </summary>
            <param name="sender">A <see cref="!:Camera"/> type source</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:ANDOR_CS.Events.TemperatureStatusEventArgs">
            <summary>
            Stores the event arguments for all Acquisition-based events
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.TemperatureStatusEventArgs.EventTime">
            <summary>
            Time stamp of the event
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.TemperatureStatusEventArgs.Temperature">
            <summary>
            Camera temperature.
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.TemperatureStatusEventArgs.Status">
            <summary>
            Camera status at the moment of the event
            </summary>
        </member>
        <member name="M:ANDOR_CS.Events.TemperatureStatusEventArgs.#ctor(ANDOR_CS.Enums.TemperatureStatus,System.Single)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ANDOR_CS.Events.AcquisitionStatusEventArgs">
            <summary>
            Stores the event arguments for all Acquisition-based events
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.AcquisitionStatusEventArgs.EventTime">
            <summary>
            Time stamp of the event
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.AcquisitionStatusEventArgs.Status">
            <summary>
            Camera status at the moment of the event
            </summary>
        </member>
        <member name="P:ANDOR_CS.Events.AcquisitionStatusEventArgs.IsAsync">
            <summary>
            Indicates if event is received from asynchronous task.
            </summary>
        </member>
        <member name="M:ANDOR_CS.Events.AcquisitionStatusEventArgs.#ctor(ANDOR_CS.Enums.CameraStatus,System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
    </members>
</doc>

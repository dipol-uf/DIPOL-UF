<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:enum="clr-namespace:DIPOL_UF.Enums">

    <!--Basic font styles-->
    <Style x:Key="TitleFont"  TargetType="{x:Type Control}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
    </Style>
    <Style x:Key="ContentFont"  TargetType="{x:Type Control}">
        <Setter Property="FontSize" Value="{StaticResource ResourceKey=ContentFontSize}"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <Style x:Key="SmallFont"  TargetType="{x:Type Control}">
        <Setter Property="FontSize" Value="{StaticResource ResourceKey=SmallFontSize}"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <!--Menu bar styles-->

    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Command" Value="{Binding Command}"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem}}"/>
    </Style>

    <Style x:Key="MenuBarStyle" TargetType="{x:Type Menu}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemStyle}"/>
    </Style>

    <!--Status bar styles-->

    <Style x:Key="StatusBarStyle" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Height" Value="{StaticResource ResourceKey=StatusBarHeight}"/>
        <Setter Property="MinHeight" Value="{StaticResource ResourceKey=StatusBarHeight}"/>
        <Setter Property="MaxHeight" Value="{StaticResource ResourceKey=StatusBarHeight}"/>
    </Style>

    <!--Button styles-->

    <Style x:Key="BasicButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Padding" Value="7, 2, 7, 2"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="NegativeEffectButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicButtonStyle}">
        <Setter Property="Background" Value="{StaticResource ResourceKey=NegativeEffectButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey=NegativeEffectButtonForegroundColor}"/>
    </Style>
    <Style x:Key="PositiveEffectButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicButtonStyle}">
        <Setter Property="Background" Value="{StaticResource ResourceKey=PositiveEffectButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey=PositiveEffectButtonForegroundColor}"/>
    </Style>

    <!--Derived font styles for text controls-->

    <Style x:Key="TitleFont_Label" TargetType="{x:Type Label}" BasedOn="{StaticResource TitleFont}">
        <Setter Property="Margin" Value="1"/>
    </Style>
    <Style x:Key="ContentFont_Label" TargetType="{x:Type Label}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Margin" Value="1"/>
    </Style>

    <Style x:Key="ContentFont_TextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{StaticResource ResourceKey=ContentFontSize}"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Padding" Value="{StaticResource ResourceKey=DefaultPadding}"/>
        <Setter Property="Margin" Value="{StaticResource ResourceKey=DefaultMargin}"/>
        <Setter Property="MinHeight" Value="15"/>
    </Style>

    <Style x:Key="TextBlock_SmallFont" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{StaticResource ResourceKey=SmallFontSize}"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Padding" Value="{StaticResource ResourceKey=DefaultPadding}"/>
        <Setter Property="Margin" Value="{StaticResource ResourceKey=DefaultMargin}"/>
        <Setter Property="MinHeight" Value="15"/>
    </Style>

    <!--Border style-->
    <Style x:Key="BorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=BorderColor}"/>
        <Setter Property="BorderThickness" Value="{StaticResource ResourceKey=BorderThickness}"/>
    </Style>

    <!--Separator/Border style-->
    <Style x:Key="SeparatorAsBorderStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource ResourceKey=BorderColor}"/>
        <Setter Property="Height" Value="{StaticResource ResourceKey=BorderThicknessValue}"/>
    </Style>

    <!--List-like styles-->
    <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey=ListContainerBackgroundColor}"/>
    </Style>
    
    <Style x:Key="SelectableListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Focusable" Value="True"/>
    </Style>
   

    <!--TabItem style-->
    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Header" Value="{Binding TabHeader}"/>
        <Setter Property="Border.CornerRadius" Value="{DynamicResource TabItemTopCornerRadius}"/>
        <Setter Property="Margin" Value="{DynamicResource TabItemMargin}"/>
        <Setter Property="Foreground" Value="{DynamicResource TabItemForegroundBrush}"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border CornerRadius="0" Margin="-6.5 -1.5, -6.5, -1.5"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                        <Border.Background>
                            <SolidColorBrush Color="{StaticResource BackgroundColor_2}"/>
                        </Border.Background>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger
                                        Binding="{Binding 
                                            RelativeSource={RelativeSource FindAncestor, AncestorType=TabItem},
                                        Path=DataContext.State}"
                                        Value="{x:Static enum:ControlState.Slave}">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard x:Name="Animation_To_3">
                                                <Storyboard TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                    <ColorAnimation 
                                                        From="{StaticResource BackgroundColor_2}"
                                                        To="{StaticResource BackgroundColor_3}"
                                                        Duration="{StaticResource ColorChangeDuration}"
                                                        FillBehavior="HoldEnd"
                                                    />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard x:Name="Animation_From_3">
                                                <Storyboard TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                    <ColorAnimation 
                                                        From="{StaticResource BackgroundColor_3}"
                                                        To="{StaticResource BackgroundColor_2}"
                                                        Duration="{StaticResource ColorChangeDuration}"
                                                        FillBehavior="Stop"
                                                    />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                    <DataTrigger
                                        Binding="{Binding 
                                            RelativeSource={RelativeSource FindAncestor, AncestorType=TabItem},
                                        Path=DataContext.State}"
                                        Value="{x:Static enum:ControlState.Master}">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard x:Name="Animation_To_1">
                                                <Storyboard TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                    <ColorAnimation 
                                                        From="{StaticResource BackgroundColor_2}"
                                                        To="{StaticResource BackgroundColor_1}"
                                                        Duration="{StaticResource ColorChangeDuration}"
                                                        FillBehavior="HoldEnd"
                                                    />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard x:Name="Animation_From_1">
                                                <Storyboard TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                    <ColorAnimation 
                                                        From="{StaticResource BackgroundColor_1}"
                                                        To="{StaticResource BackgroundColor_2}"
                                                        Duration="{StaticResource ColorChangeDuration}"
                                                        FillBehavior="Stop"
                                                    />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <ContentPresenter Content="{Binding}" Margin="{StaticResource DefaultMargin}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox style-->
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ContentFont}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="{StaticResource ResourceKey=DefaultMargin}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource ResourceKey=SmallFontSize}"/>
    </Style>

    <!--TextBox style-->
    <Style x:Key="TextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource ResourceKey=ContentFont}">
        <Setter Property="Margin" Value="{StaticResource ResourceKey=DefaultMargin}"/>
    </Style>
    <Style x:Key="TextBoxStyle_SmallFont" TargetType="TextBox" BasedOn="{StaticResource ResourceKey=SmallFont}">
        <Setter Property="Margin" Value="{StaticResource ResourceKey=DefaultMargin}"/>
    </Style>

    <!--ProgressBar style-->
    <Style x:Key="ProgressBarStyle" TargetType="ProgressBar" BasedOn="{StaticResource ResourceKey=ContentFont}">
        <Setter Property="Margin" Value="10, 3, 10, 3"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Width" Value="auto"/>
    </Style>

    <Style x:Key="TextBoxWithErrors" BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).Count, Converter={StaticResource CompareToConverter}, ConverterParameter='> 0'}"
                Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource ErrorsToStringConverter}}"/>
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).Count, Converter={StaticResource CompareToConverter}, ConverterParameter='== 0'}"
                Value="True">
                <Setter Property="ToolTip" Value="{x:Null}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxWithErrors" BasedOn="{StaticResource ComboBoxStyle}" TargetType="ComboBox">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).Count, Converter={StaticResource CompareToConverter}, ConverterParameter='> 0'}"
                Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource ErrorsToStringConverter}}"/>
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).Count, Converter={StaticResource CompareToConverter}, ConverterParameter='== 0'}"
                Value="True">
                <Setter Property="ToolTip" Value="{x:Null}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>